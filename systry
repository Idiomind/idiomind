#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import gtk
import gio
import signal
import subprocess
import appindicator
import urllib

APP_NAME = 'idiomind'
APP_VERSION = '1.5.0'

class IndicatorIdiomind:
    MENUCONF_PATH = os.getenv('HOME') + '/.config/idiomind/s/topic_m'
    
    def __init__(self):
        self.ind = appindicator.Indicator("/tmp/.idmtp1/tryidmdicon","/tmp/.idmtp1/tryidmdicon", appindicator.CATEGORY_APPLICATION_STATUS)
        self.ind.set_status(appindicator.STATUS_ACTIVE)       

        self.update_menu()

    def create_menu_item(self, label):
        item = gtk.ImageMenuItem()
        item.set_label(label)
        return item
        
    def create_menu_it(self, label, icon_name):
        image = gtk.Image()
        image.set_from_icon_name(icon_name, 24)
        item = gtk.ImageMenuItem()
        item.set_label(label)
        item.set_image(image)
        item.set_always_show_image(True)
        return item
    
    def update_menu(self, widget = None, data = None):
        try:
            menutopic = open(self.MENUCONF_PATH).readlines()
        except IOError:
            menutopic = []        

        menu = gtk.Menu()
        self.ind.set_menu(menu)

        item = self.create_menu_item("New")
        item.connect("activate", self.on_New_click, 'New:')
        menu.append(item)

        for bm in menutopic:
            path, label = bm.strip().partition(' ')[::2]

            if not label:
                label = os.path.basename(os.path.normpath(path))

            label = urllib.unquote(label)
            item = self.create_menu_it(label, "gtk-home")
            item.connect("activate", self.on_bookmark_click, path)

            menu.append(item)

        item = gtk.SeparatorMenuItem()
        menu.append(item)
       
        item = self.create_menu_item("Topics")
        item.connect("activate", self.on_Topics_click, 'Topics:')
        menu.append(item)

        item = self.create_menu_item("Settings")
        item.connect("activate", self.on_Settings_click, 'Setting:')
        menu.append(item)
        
        item = self.create_menu_item("Quit")
        item.connect("activate", gtk.main_quit)
        menu.append(item)

        menu.show_all()

    def on_bookmark_click(self, widget, path):
        subprocess.Popen('/usr/share/idiomind/topic')
    def on_Topics_click(self, widget, path):
        subprocess.Popen('/usr/share/idiomind/chng')
    def on_New_click(self, widget, path):
        subprocess.Popen('/usr/share/idiomind/default/pnls')
    def on_Settings_click(self, widget, path):
        subprocess.Popen('/usr/share/idiomind/cnfg')
    def on_menutopic_changed(self, filemonitor, file, other_file, event_type):
        if event_type == gio.FILE_MONITOR_EVENT_CHANGES_DONE_HINT:
            print 'menutopic changed'
            self.update_menu()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, lambda signal, frame: gtk.main_quit())

    i = IndicatorIdiomind()
    
    file = gio.File(i.MENUCONF_PATH)
    monitor = file.monitor_file()
    monitor.connect("changed", i.on_menutopic_changed)            
    
    gtk.main()
